// Mocks generated by Mockito 5.4.4 from annotations
// in prime_alert/test/features/random/cubit/prime_number_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hydrated_bloc/src/hydrated_storage.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:prime_alert/features/random/model/data/timed_number.dart'
    as _i2;
import 'package:prime_alert/features/random/model/polling_service.dart' as _i5;
import 'package:prime_alert/features/random/model/random_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTimedNumber_0 extends _i1.SmartFake implements _i2.TimedNumber {
  _FakeTimedNumber_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RandomRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandomRepository extends _i1.Mock implements _i3.RandomRepository {
  MockRandomRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.TimedNumber> getRandomNumber() => (super.noSuchMethod(
        Invocation.method(
          #getRandomNumber,
          [],
        ),
        returnValue: _i4.Future<_i2.TimedNumber>.value(_FakeTimedNumber_0(
          this,
          Invocation.method(
            #getRandomNumber,
            [],
          ),
        )),
      ) as _i4.Future<_i2.TimedNumber>);
}

/// A class which mocks [PollingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPollingService extends _i1.Mock implements _i5.PollingService {
  MockPollingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<void> get pollingStream => (super.noSuchMethod(
        Invocation.getter(#pollingStream),
        returnValue: _i4.Stream<void>.empty(),
      ) as _i4.Stream<void>);

  @override
  void startPolling() => super.noSuchMethod(
        Invocation.method(
          #startPolling,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopPolling() => super.noSuchMethod(
        Invocation.method(
          #stopPolling,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Storage].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorage extends _i1.Mock implements _i6.Storage {
  MockStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic read(String? key) => super.noSuchMethod(Invocation.method(
        #read,
        [key],
      ));

  @override
  _i4.Future<void> write(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
